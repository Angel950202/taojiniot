package com.taojin.iot.api.equipment.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taojin.iot.BaseController;
import com.taojin.iot.base.comm.Filter;
import com.taojin.iot.base.comm.Page;
import com.taojin.iot.base.comm.Pageable;
import com.taojin.iot.base.comm.entity.UserSession;
import com.taojin.iot.base.comm.utils.DatesUtils;
import com.taojin.iot.service.charts.entity.ChartsType;
import com.taojin.iot.service.equipment.entity.Equipment;
import com.taojin.iot.service.equipment.entity.EquipmentIco;
import com.taojin.iot.service.equipment.entity.EquipmentSensor;
import com.taojin.iot.service.equipment.entity.EquipmentSensorParams;
import com.taojin.iot.service.equipment.enums.EquipmentProtocolEnum;
import com.taojin.iot.service.equipment.service.EquipmentSensorService;
import com.taojin.iot.service.equipment.service.EquipmentService;
import com.taojin.iot.service.task.service.ProductionLineService;
import com.taojin.iot.service.user.service.UserService;

/**
 * Controller-设备 iot物联网平台
 * ============================================================================
 * 版权所有 2013-2016 无锡淘金网络科技有限公司，并保留所有权利。
 * ----------------------------------------------------------------------------
 * 提示：在未取得UcSkype商业授权之前，您不能将本软件应用于商业用途，否则UcSkype将保留追究的权力。
 * ----------------------------------------------------------------------------
 * 官方网站：http://www.ucskype.com/
 * ----------------------------------------------------------------------------
 * 下午2:02:12 author 王杰
 * ============================================================================
 */
@Controller("internalEquipmentController")
@RequestMapping("/internal/equipment/equipment")
public class EquipmentController extends BaseController {
	@Resource(name = "productionLineServiceImpl")
	private ProductionLineService productionLineService;
	@Resource(name = "equipmentServiceImpl")
	private EquipmentService equipmentService;
	@Resource(name = "equipmentSensorServiceImpl")
	private EquipmentSensorService equipmentSensorService;
	@Resource(name = "userServiceImpl")
	private UserService userService;

	/**
	 * 获取设备列表
	 * 
	 * @param requestParams
	 *            requestParams={"action":"equipment","method":"list","session":
	 *            {"sessionId":"会话ID","equipmentTypeId":"频道ID"},"param":{"name":
	 *            "设备名称", "pageNumber":"页码","pageSize":"每页记录数","state":"连接状态"}}
	 * @return
	 */
	@RequestMapping(value = "/list", produces = "application/josn; charset=utf-8")
	@ResponseBody
	public String list(String requestParams) {
		if (StringUtils.isBlank(requestParams)) {
			return errorMsg("-31", "获取默认参数失败");
		}
		JSONObject node = new JSONObject();
		JSONObject param = new JSONObject();
		JSONObject session = new JSONObject();
		try {
			node = JSONObject.fromObject(requestParams);
			param = node.getJSONObject("param");
			session = node.getJSONObject("session");
		} catch (Exception e) {
			return successMsg("-1", "参数解析错误!");
		}
		// 会话验证
		/*
		 * UserSession userSession = super.getSession(session); if (userSession
		 * == null) { return errorMsg("302", "会话超时,请重 新登录!"); }else
		 * if(super.getEquipmentTypeId(session) == null){ return errorMsg("401",
		 * "频道丢失,请重新进入频道!"); }
		 */
		// 参数验证
		if (!param.has("pageNumber")) {
			param.put("pageNumber", 1);
		}

		if (!param.has("pageSize")) {
			param.put("pageSize", 200);
		}
		List<Filter> filters = new ArrayList<Filter>();

		if (param.has("name")&&!"".equals(param.get("lineName"))) {
			filters.add(Filter.like("name", "%" + param.getString("name") + "%"));
		}
		if(param.has("lineName")&&!"null".equals(param.getString("lineName"))&&!"".equals(param.getString("lineName"))){
			filters.add(Filter.eq("lineName", param.getString("lineName")));
		}

		if (param.has("state")&&!"".equals(param.get("state"))){
			filters.add(Filter.eq("state", param.getInt("state")));
		}

		if (param.has("isDel")) {
			if (param.getInt("isDel") == 0) {
				filters.add(Filter.eq("isDel", false));
			} else {
				filters.add(Filter.eq("isDel", true));
			}
		} else {
			filters.add(Filter.eq("isDel", false));
		}

		// 分页检索
		Pageable pageable = new Pageable(param.getInt("pageNumber"),
				param.getInt("pageSize"));
		// filters.add(Filter.eq("equipmentTypeId",
		// session.getLong("equipmentTypeId")));
		// filters.add(Filter.eq("ownerId",
		// Long.parseLong(userSession.getUserId())));
		pageable.setFilters(filters);
		Page<Equipment> page = equipmentService.findPage(pageable);

		JSONObject jsonReturn = new JSONObject();
		jsonReturn.put("errcode", "0");
		jsonReturn.put("errmsg", "获取设备成功");
		JSONArray jsonArray = new JSONArray();
		// User user =
		// userService.find(Long.parseLong(userSession.getUserId()));
		for (int i = 0; i < page.getContent().size(); i++) {
			JSONObject json = new JSONObject();
			Equipment equipment = page.getContent().get(i);
			json.put("id", equipment.getId());
			json.put("name", equipment.getName());
			json.put("createDate", DatesUtils.dateToString(
					equipment.getCreateDate(), "yyyy-MM-dd HH:mm:ss"));
			json.put("idNumber", equipment.getIdNumber());
			/*
			 * if(user != null){ // json.put("apiKey", user.getApiKey());
			 * json.put("equipmentKey", equipment.getIdNumber()); }
			 */

			json.put("workStationName", equipment.getWorkStationName());

			json.put("workStationNumber", equipment.getWorkStationNumber());

			json.put("offTime", equipment.getOffTime());

			json.put("alarmCount", equipment.getAlarmCount());

			json.put("yieldTarget", equipment.getYieldTarget());

			json.put("lineNumber", equipment.getLineNumber());

			json.put("lineName", equipment.getLineName());

			json.put("serialNumber", equipment.getSerialNumber());
			json.put("equipmentProtocol", equipment.getEquipmentProtocol()
					.name());
			json.put("duration", equipment.getDuration());
			json.put("share", equipment.getShare());
			json.put("devicePosition", equipment.getDevicePosition());
			json.put("devicePositionLng", equipment.getDevicePositionLng());
			json.put("devicePositionLat", equipment.getDevicePositionLat());
			if (equipment.getEquipmentIco() != null) {
				json.put("equipmentIco", equipment.getEquipmentIco()
						.getIcoPath());
				json.put("equipmentOnlineIco", equipment.getEquipmentIco()
						.getOnlineIco());
			}
			if (equipment.getEquipmentIpaddress() != null) {
				json.put("equipmentIp", equipment.getEquipmentIpaddress()
						.getIpAddress());
				json.put("equipmentPort", equipment.getEquipmentIpaddress()
						.getIpPort());
			}

			if (equipment.getChartsType() != null) {
				json.put("chartsId", equipment.getChartsType().getId());
				json.put("chartsTypes", equipment.getChartsType()
						.getEchartTypeParams());
				json.put("chartsName", equipment.getChartsType().getName());
			}

			//json.put("equipmentTypeId", equipment.getEquipmentTypeId());
			json.put("equipmentStatus", equipment.getState());
			json.put("equipmentStatusWarn", equipment.getStateInfo());// 报警信息
			jsonArray.add(json);
		}
		jsonReturn.put("values", jsonArray);
		jsonReturn = super.getJsonPage(page, jsonReturn);
		return jsonReturn.toString();
	}

	/**
	 * 添加设备
	 * 
	 * @param requestParams
	 *            {"action":"equipment","method":"save","session":{"sessionId":
	 *            "会话ID","equipmentTypeId":"频道ID"},
	 *            "param":{"name":"设备名称","chartsTypeId":"图表类型ID",
	 *            "equipmentProtocol":"链接协议","duration":"上报周期","share":"是否公开",
	 *            "devicePosition":"设备位置","devicePositionLng":"经度",
	 *            "devicePositionLat":"纬度","equipmentIcoId":"设备图标",
	 *            "equipmentSensors"
	 *            :[{"name":"名称","type":"类型","sign":"小数位","unit"
	 *            :"单位","equipmentIcoId"
	 *            :"图标ID","equipmentId":"所属设备ID","sensorParamId":"参数ID"}]}}
	 * @return
	 */
	@RequestMapping(value = "/save", produces = "application/josn; charset=utf-8")
	@ResponseBody
	public String save(String requestParams) {
		if (StringUtils.isBlank(requestParams)) {
			return errorMsg("-31", "获取默认参数失败");
		}
		JSONObject node = new JSONObject();
		JSONObject param = new JSONObject();
		JSONObject session = new JSONObject();
		try {
			node = JSONObject.fromObject(requestParams);
			param = node.getJSONObject("param");
			session = node.getJSONObject("session");
		} catch (Exception e) {
			return successMsg("-1", "参数解析错误!");
		}
	/*	// 会话验证
		UserSession userSession = super.getSession(session);
		if (userSession == null) {
			return errorMsg("302", "会话超时,请重 新登录!");
		} else if (super.getEquipmentTypeId(session) == null) {
			return errorMsg("401", "频道丢失,请重新进入频道!");
		}*/

		// 参数验证
		if (!param.has("name")) {
			return errorMsg("-2", "缺少设备名称!");
		}
		if (!param.has("equipmentProtocol")) {
			return errorMsg("-2", "缺少设备协议!");
		}
		if (!param.has("duration")) {
			return errorMsg("-2", "缺少上报周期!");
		}
		if (!param.has("share")) {
			param.put("share", 0);
		}
		if (!param.has("devicePosition")) {
			return errorMsg("-2", "缺少设备位置!");
		}
		if (!param.has("devicePositionLng")) {
			return errorMsg("-2", "缺少经度!");
		}
		if (!param.has("devicePositionLat")) {
			return errorMsg("-2", "缺少纬度!");
		}
		if (!param.has("equipmentIcoId")) {
			return errorMsg("-2", "缺少设备图标!");
		}

		if (!param.has("chartsTypeId")) {
			param.put("chartsTypeId", "1");
		}

		// if(equipmentService.count(Filter.eq("name", param.getString("name")))
		// > 0){
		// return errorMsg("-2", "设备名称已存在,换一个名字吧!");
		// }

		Equipment equipment = new Equipment();
		equipment.setName(param.getString("name"));
		if (!param.has("idNumber"))
			equipment.setIdNumber(param.getString("idNumber"));
		equipment.setOffTime(param.getInt("offTime"));
		equipment.setAlarmCount(1);
		if(param.has("alarmCount"))
		equipment.setAlarmCount(param.getInt("alarmCount"));
		equipment.setYieldTarget(param.getInt("yieldTarget"));
		equipment.setLineNumber(param.getString("lineNumber"));
		equipment.setLineName(productionLineService.getByParam("lineNumber",
				param.getString("lineNumber")).getLineName());
		equipment.setEquipmentProtocol(EquipmentProtocolEnum.TCP);
		equipment.setDuration(param.getInt("duration"));
		equipment.setShare(param.getInt("share"));
		equipment.setDevicePosition(param.getString("devicePosition"));
		equipment.setDevicePositionLng(param.getString("devicePositionLng"));
		equipment.setDevicePositionLat(param.getString("devicePositionLat"));
		EquipmentIco equipmentIco = new EquipmentIco();
		equipmentIco.setId(param.getLong("equipmentIcoId"));
		equipment.setEquipmentIco(equipmentIco);
		//equipment.setEquipmentTypeId(session.getLong("equipmentTypeId"));
	/*	EquipmentIpaddress equipmentIpaddress = new EquipmentIpaddress();
		equipmentIpaddress.setId(1L);*/
		//equipment.setEquipmentIpaddress(equipmentIpaddress);
	//	equipment.setOwnerId(Long.parseLong(userSession.getUserId()));
		ChartsType chartsType = new ChartsType();
		chartsType.setId(param.getLong("chartsTypeId"));
		equipment.setChartsType(chartsType);
		equipment.setState(2);
		equipmentService.save(equipment);

	
		/*	JSONArray jsonSonsors = param.getJSONArray("equipmentSensors");
			for (int i = 0; i < jsonSonsors.size(); i++) {
				try {
					JSONObject sonsorParam = jsonSonsors.getJSONObject(i);
					if (!sonsorParam.has("name")) {
						sonsorParam.put("name", "未命名");
					}
					
					if (!sonsorParam.has("type")) {
						sonsorParam.put("type", 1);
					}
					if (!sonsorParam.has("sign")) {
						sonsorParam.put("sign", 0);
					}
					if (!sonsorParam.has("sensorIcoId")) {
						sonsorParam.put("sensorIcoId", "1");
					}
					equipmentSensor.setName(sonsorParam.getString("name"));
					equipmentSensor.setType(sonsorParam.getInt("type"));
					equipmentSensor.setSign(sonsorParam.getInt("sign"));
					equipmentSensor.setUnit(sonsorParam.getString("unit"));
					equipmentSensor.setEquipment(equipment);
					if (sonsorParam.has("serialNumber"))
						equipmentSensor.setSerialNumber(sonsorParam
								.getString("serialNumber"));
					EquipmentIco equipmentIcoSensor = new EquipmentIco();
					equipmentIcoSensor
							.setId(sonsorParam.getLong("sensorIcoId"));
					equipmentSensor.setEquipmentIco(equipmentIcoSensor);
					equipmentSensor.setEquipmentTypeId(session
							.getLong("equipmentTypeId"));
					equipmentSensor.setChannel(0);
					equipmentSensor.setOwnerId(Long.parseLong(userSession
							.getUserId()));
					if (sonsorParam.has("sensorParamId")) {
						EquipmentSensorParams sensorParams = new EquipmentSensorParams();
						sensorParams
								.setId(sonsorParam.getLong("sensorParamId"));
						equipmentSensor.setEquipmentSensorParams(sensorParams);
					}*/
		// 添加传感器
		if (param.has("equipmentSensors")) {
			List<EquipmentSensor> equipmentSensorList = com.alibaba.fastjson.JSONObject.parseArray(
					param.getString("equipmentSensors"), EquipmentSensor.class);
			for(EquipmentSensor equipmentSensor:equipmentSensorList){
				equipmentSensor.setEquipment(equipment);
				equipmentSensorService.save(equipmentSensor);
			}
					
		/*		} catch (Exception e) {
					continue;
				}
			}*/
		}
		return successMsg("0", "添加设备成功!");
	}

	/**
	 * 根据设备ID获取设备编辑信息
	 * 
	 * @param requestParams
	 *            requestParams={"action":"equipment","method":
	 *            "getEquipmentById","session":
	 *            {"sessionId":"会话ID","equipmentTypeId"
	 *            :"频道ID"},"param":{"equipmentId":"键值"}}
	 * @return
	 */
	@RequestMapping(value = "/getEquipmentById", produces = "application/josn; charset=utf-8")
	@ResponseBody
	public String getEquipmentById(String requestParams) {
		if (StringUtils.isBlank(requestParams)) {
			return errorMsg("-31", "获取默认参数失败");
		}
		JSONObject node = new JSONObject();
		JSONObject param = new JSONObject();
		try {
			node = JSONObject.fromObject(requestParams);
			param = node.getJSONObject("param");
		} catch (Exception e) {
			return successMsg("-1", "参数解析错误!");
		}
		/*
		 * //会话验证 UserSession userSession = super.getSession(session); if
		 * (userSession == null) { return errorMsg("302", "会话超时,请重 新登录!"); }else
		 * if(super.getEquipmentTypeId(session) == null){ return errorMsg("401",
		 * "频道丢失,请重新进入频道!"); }
		 */
		// 参数验证
		if (!param.has("equipmentId")) {
			return errorMsg("-2", "请选择一个操作对象!");
		}

		Equipment equipment = equipmentService.find(param
				.getLong("equipmentId"));
		if (equipment == null) {
			return errorMsg("-2", "对象不存在，可能已经被删除!");
		}

		JSONObject jsonReturn = new JSONObject();
		jsonReturn.put("errcode", "0");
		jsonReturn.put("errmsg", "获取设备成功");
		JSONObject json = new JSONObject();
		json.put("workStationName", equipment.getWorkStationName());
		json.put("workStationNumber", equipment.getWorkStationNumber());
		json.put("offTime", equipment.getOffTime());
		json.put("alarmCount", equipment.getAlarmCount());
		json.put("yieldTarget", equipment.getYieldTarget());
		json.put("lineNumber", equipment.getLineNumber());
		json.put("lineName", equipment.getLineName());		
		json.put("id", equipment.getId());
		json.put("name", equipment.getName());
		json.put("createDate", DatesUtils.dateToString(
				equipment.getCreateDate(), "yyyy-MM-dd HH:mm:ss"));
		json.put("idNumber", equipment.getIdNumber());
		json.put("serialNumber", equipment.getSerialNumber());
		json.put("equipmentProtocol", equipment.getEquipmentProtocol().name());
		json.put("duration", equipment.getDuration());
		json.put("share", equipment.getShare());
		json.put("devicePosition", equipment.getDevicePosition());
		json.put("devicePositionLng", equipment.getDevicePositionLng());
		json.put("devicePositionLat", equipment.getDevicePositionLat());
		if (equipment.getEquipmentIco() != null) {
			json.put("equipmentIcoId", equipment.getEquipmentIco().getId());
			json.put("equipmentIco", equipment.getEquipmentIco().getIcoPath());
			json.put("equipmentOnlineIco", equipment.getEquipmentIco()
					.getOnlineIco());
		}
		if (equipment.getEquipmentIpaddress() != null) {
			json.put("equipmentIp", equipment.getEquipmentIpaddress()
					.getIpAddress());
			json.put("equipmentPort", equipment.getEquipmentIpaddress()
					.getIpPort());
		}
		if (equipment.getChartsType() != null) {
			json.put("chartsId", equipment.getChartsType().getId());
			json.put("chartsTypes", equipment.getChartsType()
					.getEchartTypeParams());
			json.put("chartsName", equipment.getChartsType().getName());
		}

		//json.put("equipmentTypeId", equipment.getEquipmentTypeId());
		if (equipment.getEquipmentSensors().size() > 0) {
			JSONArray jsonArraySensors = new JSONArray();
			for (int i = 0; i < equipment.getEquipmentSensors().size(); i++) {
				JSONObject jsonSensors = new JSONObject();
				EquipmentSensor equipmentSensor = equipment
						.getEquipmentSensors().get(i);
				jsonSensors.put("id", equipmentSensor.getId());
				jsonSensors.put("idNumber", equipmentSensor.getIdNumber());
				jsonSensors.put("serialNumber",
						equipmentSensor.getSerialNumber());
				jsonSensors.put("name", equipmentSensor.getName());
				jsonSensors.put("type", equipmentSensor.getType());
				jsonSensors.put("sign", equipmentSensor.getSign());
				jsonSensors.put("unit", equipmentSensor.getUnit());
				if (equipmentSensor.getEquipmentIco() != null) {
					jsonSensors.put("sensorIcoId", equipmentSensor
							.getEquipmentIco().getId());
					jsonSensors.put("sensorIcoPath", equipmentSensor
							.getEquipmentIco().getIcoPath());
					jsonSensors.put("sensorIcoOnlinePath", equipmentSensor
							.getEquipmentIco().getOnlineIco());
				}
				if (equipmentSensor.getEquipment() != null) {
					jsonSensors.put("equipmentId", equipmentSensor
							.getEquipment().getId());
					jsonSensors.put("equipment", equipmentSensor.getEquipment()
							.getName());
				}
				if (equipment.getChartsType() != null) {
					json.put("chartsId", equipment.getChartsType().getId());
					json.put("chartTypes", equipment.getChartsType()
							.getEchartTypeParams());
					json.put("chartName", equipment.getChartsType().getName());
				}

				jsonArraySensors.add(jsonSensors);
			}
			json.put("equipmentSensors", jsonArraySensors);
		}

		jsonReturn.put("value", json);
		return jsonReturn.toString();
	}

	/**
	 * 更新设备
	 * 
	 * @param requestParams
	 *            {"action":"equipment","method":"update","session":{"sessionId"
	 *            :"会话ID","equipmentTypeId":"频道ID"},
	 *            "param":{"equipmentId":"设备ID"
	 *            ,"name":"设备名称","chartsTypeId":"图表类型ID",
	 *            "equipmentProtocol":"链接协议","duration":"上报周期","share":"是否公开",
	 *            "devicePosition"
	 *            :"设备位置","devicePositionLng":"经度","devicePositionLat":"纬度",
	 *            "equipmentIcoId"
	 *            :"设备图标","equipmentSensors":[{"name":"名称","type"
	 *            :"类型","sign":"小数位"
	 *            ,"unit":"单位","equipmentIcoId":"图标ID","sensorParamId"
	 *            :"参数ID"}]}}
	 * @return
	 */
	@RequestMapping(value = "/update", produces = "application/josn; charset=utf-8")
	@ResponseBody
	public String update(String requestParams) {
		if (StringUtils.isBlank(requestParams)) {
			return errorMsg("-31", "获取默认参数失败");
		}
		JSONObject node = new JSONObject();
		JSONObject param = new JSONObject();
		JSONObject session = new JSONObject();
		try {
			node = JSONObject.fromObject(requestParams);
			param = node.getJSONObject("param");
			session = node.getJSONObject("session");
		} catch (Exception e) {
			return successMsg("-1", "参数解析错误!");
		}
		// 会话验证
	/*	UserSession userSession = super.getSession(session);
		if (userSession == null) {
			return errorMsg("302", "会话超时,请重 新登录!");
		} else if (super.getEquipmentTypeId(session) == null) {
			return errorMsg("401", "频道丢失,请重新进入频道!");
		}*/

		// 参数验证
		if (!param.has("equipmentId")) {
			return errorMsg("-2", "缺少设备ID!");
		}
		Equipment equipment = equipmentService.find(param
				.getLong("equipmentId"));

		if (param.has("name")) {
			equipment.setName(param.getString("name"));
		}
	/*	if (param.has("equipmentProtocol")) {
			equipment.setEquipmentProtocol(EquipmentProtocolEnum.valueOf(param
					.getString("equipmentProtocol")));
		}*/
		if (param.has("duration")) {
			equipment.setDuration(param.getInt("duration"));
		}
		if (param.has("share")) {
			equipment.setShare(param.getInt("share"));
		}
		if (param.has("devicePosition")) {
			equipment.setDevicePosition(param.getString("devicePosition"));
		}
		if (param.has("devicePositionLng")) {
			equipment
					.setDevicePositionLng(param.getString("devicePositionLng"));
		}
		if (param.has("devicePositionLat")) {
			equipment
					.setDevicePositionLat(param.getString("devicePositionLat"));
		}
		if (param.has("workStationName"))
			equipment.setWorkStationName(param.getString("workStationName"));
		if (param.has("workStationNumber"))
			equipment
					.setWorkStationNumber(param.getString("workStationNumber"));
		if (param.has("offTime"))
			equipment.setOffTime(param.getInt("offTime"));
		
		equipment.setAlarmCount(1);
		if (param.has("alarmCount")&&param.isNullObject()){
			equipment.setAlarmCount(param.getInt("alarmCount"));
		}
		if (param.has("yieldTarget"))
			equipment.setYieldTarget(param.getInt("yieldTarget"));
		if (param.has("lineNumber"))
			equipment.setLineNumber(param.getString("lineNumber"));
		if (param.has("lineName"))
			equipment.setLineName(param.getString("lineName"));

		if (param.has("equipmentIcoId")) {
			EquipmentIco equipmentIco = new EquipmentIco();
			equipmentIco.setId(param.getLong("equipmentIcoId"));
			equipment.setEquipmentIco(equipmentIco);
		}
		if (param.has("chartsTypeId")) {
			ChartsType chartsType = new ChartsType();
			chartsType.setId(param.getLong("chartsTypeId"));
			equipment.setChartsType(chartsType);
		}

		// if(equipmentService.count(Filter.eq("name",
		// param.getString("name")),Filter.ne("id",
		// param.getLong("equipmentId"))) > 0){
		// return errorMsg("-2", "设备名称已存在,换一个名字吧!");
		// }
		if (param.has("idNumber")) {
			equipment.setIdNumber(param.getString("idNumber"));
		}

	 equipmentService.update(equipment);
/*		// 修改传感器     
	 if (param.has("equipmentSensors")) {
			List<EquipmentSensor> equipmentSensorList = com.alibaba.fastjson.JSONObject.parseArray(
					param.getString("equipmentSensors"), EquipmentSensor.class);
			for(EquipmentSensor equipmentSensor:equipmentSensorList){
				equipmentSensor.setEquipment(equipment);
				equipmentSensorService.update(equipmentSensor);
			}
	 }*/
		if (param.has("equipmentSensors")) {
			JSONArray jsonSonsors = param.getJSONArray("equipmentSensors");

			System.out.println("============="+jsonSonsors.size());
			for (int i = 0; i < jsonSonsors.size(); i++) {
				try {
					JSONObject sonsorParam = jsonSonsors.getJSONObject(i);
					EquipmentSensor equipmentSensor = null;
					if (!sonsorParam.has("id")) {
						equipmentSensor = new EquipmentSensor();
						equipmentSensor.setEquipment(equipment);
//						equipmentSensor.setEquipmentTypeId(session.getLong("equipmentTypeId"));
//						equipmentSensor.setOwnerId(Long.parseLong(userSession.getUserId()));
					} else {
						equipmentSensor = equipmentSensorService
								.find(sonsorParam.getLong("id"));
					}
					if (equipmentSensor == null) {
						equipmentSensor = new EquipmentSensor();
						equipmentSensor.setEquipment(equipment);
						equipmentSensor.setEquipmentTypeId(session
								.getLong("equipmentTypeId"));
					/*	equipmentSensor.setOwnerId(Long.parseLong(userSession
								.getUserId()));*/
					}
					if (sonsorParam.has("name")) {
						equipmentSensor.setName(sonsorParam.getString("name"));
					}
					if (sonsorParam.has("unit")) {
						equipmentSensor.setUnit(sonsorParam.getString("unit"));
					}
					if (sonsorParam.has("type")) {
						equipmentSensor.setType(sonsorParam.getInt("type"));
					}
					if (sonsorParam.has("sign")) {
						equipmentSensor.setSign(sonsorParam.getInt("sign"));
					}
					if (sonsorParam.has("serialNumber")) {
						equipmentSensor.setSerialNumber(sonsorParam
								.getString("serialNumber"));
					}
					if (sonsorParam.has("sensorIcoId")) {
						EquipmentIco equipmentIco = new EquipmentIco();
						equipmentIco.setId(sonsorParam.getLong("sensorIcoId"));
						equipmentSensor.setEquipmentIco(equipmentIco);
					}

					if (sonsorParam.has("sensorParamId")) {
						EquipmentSensorParams sensorParams = new EquipmentSensorParams();
						sensorParams
								.setId(sonsorParam.getLong("sensorParamId"));
						equipmentSensor.setEquipmentSensorParams(sensorParams);
					}
					equipmentSensorService.update(equipmentSensor);
				} catch (Exception e) {
					e.printStackTrace();
					continue;
				}
			}
		}
		return successMsg("0", "更新设备成功!");
	}

	/**
	 * 删除设备
	 * 
	 * @param requestParams
	 *            {"action":"equipment","method":"delete","session":{"sessionId"
	 *            :"会话ID","equipmentTypeId":"频道ID"},
	 *            "param":{"equipmentId":"设备ID"}}
	 * @return
	 */
	@RequestMapping(value = "/delete", produces = "application/josn; charset=utf-8")
	@ResponseBody
	public String delete(String requestParams) {
		if (StringUtils.isBlank(requestParams)) {
			return errorMsg("-31", "获取默认参数失败");
		}
		JSONObject node = new JSONObject();
		JSONObject param = new JSONObject();
		JSONObject session = new JSONObject();
		try {
			node = JSONObject.fromObject(requestParams);
			param = node.getJSONObject("param");
			session = node.getJSONObject("session");
		} catch (Exception e) {
			return successMsg("-1", "参数解析错误!");
		}
	/*	// 会话验证
		if (super.getSession(session) == null) {
			return errorMsg("302", "会话超时,请重 新登录!");
		} else if (super.getEquipmentTypeId(session) == null) {
			return errorMsg("401", "频道丢失,请重新进入频道!");
		}
*/
		// 参数验证
		if (!param.has("equipmentId")) {
			return errorMsg("-2", "缺少设备ID!");
		}
		Equipment equipment = equipmentService.find(param
				.getLong("equipmentId"));
		if (equipment.getEquipmentSensors().size() > 0) {
			return errorMsg("-2", "当前设备下绑定了"
					+ equipment.getEquipmentSensors().size() + "个传感器,不可删除!");
		}
		if (equipment.getEquipmentTriggers().size() > 0) {
			return errorMsg("-2", "当前设备下绑定了"
					+ equipment.getEquipmentTriggers().size() + "个触发器,不可删除!");
		}
		equipmentService.delete(equipment);
		return successMsg("0", "更新设备成功!");
	}

}
